@* //Ashley Shaw-Strand
//Group 4
//July 16,2025
//The Traveless App is designed to help users search flights, make reservations, and manage existing reservations. Users can input origin, destination, and day to find available flights. 
The users can then select a flight to reserve after inputting their name and citizenship. 
The system generates a unique reservation code and saves details once a reservation is made.
Users can search for their existing reservation details by inputting either their reservation code, airline, or name.
This application uses SQLite database and local data files to store data. *@



@page "/reservations" 
@using TravelApplication.Resources.Data

<h3>Reservation Finder</h3>

<div class="reservation-finder">
    <label for="Code">Code:</label>
    <input type="text" id="Code" name="Code" placeholder="Any" @bind="SearchCode"/>

    <label for="Airline">Airline:</label>
    <input type="text" id="Airline" name="Airline" placeholder="Any" @bind="SearchAirline" />

    <label for="Name">Name:</label>
    <input type="text" id="Name" name="Name" placeholder="Any" />

    <button class="btn btn-primary" @onclick="FindReservations">Find Reservations</button>
</div>

<h3>Reservations</h3>

<div class="reservations">
    @if (foundReservations == null)
    {
        <input type="text" placeholder="Loading.." readonly />
    }
    else if (foundReservations.Count == 0)
    {
        <input type="text" placeholder="No reservations found." readonly />
    }
    else
    {
        <select @onchange="OnReservationSelected">
            <option value="">Select a reservation...</option>
            @for (int i = 0; i < foundReservations.Count; i++)
            {
                <option value="@i">
                    @foundReservations[i].Reservationcode, @foundReservations[i].Airline, @foundReservations[i].Name
                </option>
            }
        </select>
    }
</div>

<h3>Reserve</h3>

<div class="reserve">

    <label for="Reservation Code">Reservation Code:</label>
    <input type="text" id="ReservationCode" name="ReservationCode" placeholder="Reservation Code" @bind="SelectedReservationCode" readonly/>

    <label for="Flight Code">Flight Code:</label>
    <input type="text" id="FlightCode" name="FlightCode" placeholder="Flight" @bind="SelectedFlightCode" readonly />

    <label for="Airline">Airline:</label>
    <input type="text" id="Airline" name="Airline" placeholder="Airline" @bind="SelectedAirline" readonly />

    <label for="Day">Day:</label>
    <input type="text" id="Day" name="Day" placeholder="Day" @bind="SelectedDay" readonly />

    <label for="Time">Time:</label>
    <input type="text" id="Time" name="Time" placeholder="Time" @bind="SelectedTime" readonly />

    <label for="Cost">Cost:</label>
    <input type="text" id="Cost" name="Cost" placeholder="0" @bind="SelectedCost" readonly />

    <label for="Name">Name:</label>
    <input type="text" id="Name" name="Name" placeholder="Name" @bind="SelectedName"/>

    <label for="Status">Status:</label>
    <input type="text" id="Status" name="Status" placeholder="Active" @bind="SelectedStatus"/>
</div>

<div class="save">
    <button class="btn btn-primary" @onclick="SaveReservation">Save</button>
    <button class="btn btn-danger" @onclick="CancelReservation">Cancel Reservation</button>
</div>




<style>
    .reservation-finder, .reservations{
        display: flex;
        flex-direction: row;
        align-content: center;
        gap: 10px;
        margin-bottom: 20px;
        padding: 15px;
        border: 1px solid #ddd;
        border-radius: 5px;
        background-color: #f9f9f9;
    }

    .reserve{
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        gap: 10px;
        margin-bottom: 20px;
        padding: 15px;
        border: 1px solid #ddd;
        border-radius: 5px;
        background-color: #f9f9f9;
    }  
    
    .save {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 15px;
        margin-top: 10px;
    }

    label {
        font-weight: bold;
        margin-right: 10px;
    }

    input {
        padding: 8px;
        width: 200px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    .btn {
        padding: 10px 20px;
        font-size: 14px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        width: 150px;
    }

    .btn-primary {
        background-color: #007bff;
        color: white;
    }

        .btn-primary:hover {
            background-color: #0056b3;
        }

    h3 {
        color: #007bff;
        margin-top: 20px;
    }

    .reservation-finder > div, .reserve > div {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .reservations input {
        width: 100%;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }
</style>

@code {
    private ReservationManager reservationManager;

    private List<TravelApplication.Resources.Data.Flights> allFlights = new();

    private string SearchCode = "";
    private string SearchAirline = "";
    private string SearchName = "";

    private List<TravelApplication.Resources.Data.Reservations> foundReservations = new();

    // Selected Reservation Fields
    private string SelectedReservationCode = "";
    private string SelectedFlightCode = "";
    private string SelectedAirline = "";
    private string SelectedDay = "";
    private string SelectedTime = "";
    private string SelectedCost = "";
    private string SelectedName = "";
    private string SelectedStatus = "";

    // Only one OnInitialized method!
    protected override void OnInitialized()
    {
        reservationManager = new ReservationManager("dbase path");
        // Load all flights once for lookup
        allFlights = reservationManager.GetAllFlights();
    }

    private async void FindReservations()
    {
        var all = await reservationManager.LoadReservations();
        foundReservations = all
            .Where(r =>
                (string.IsNullOrWhiteSpace(SearchCode) || r.Reservationcode.Contains(SearchCode, StringComparison.OrdinalIgnoreCase)) &&
                (string.IsNullOrWhiteSpace(SearchAirline) || r.Airline.Contains(SearchAirline, StringComparison.OrdinalIgnoreCase)) &&
                (string.IsNullOrWhiteSpace(SearchName) || r.Name.Contains(SearchName, StringComparison.OrdinalIgnoreCase))
            )
            .ToList();
        ClearSelectedReservation();
        StateHasChanged();
    }

    private void OnReservationSelected(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int idx) && idx >= 0 && idx < foundReservations.Count)
        {
            var res = foundReservations[idx];
            SelectedReservationCode = res.Reservationcode;
            SelectedFlightCode = res.Flightcode;
            SelectedAirline = res.Airline;
            SelectedCost = res.Cost.ToString("C");
            SelectedName = res.Name;
            SelectedStatus = res.Status ? "Active" : "Inactive";

            var flight = allFlights.FirstOrDefault(f => f.Flightcode == res.Flightcode);

            if (flight != null)
            {
                SelectedDay = flight.Dayofweek;
                SelectedTime = flight.Departuretime;
            }
            else
            {
                SelectedDay = "";
                SelectedTime = "";
            }
        }
        else
        {
            ClearSelectedReservation();
        }
    }

    private void ClearSelectedReservation()
    {
        SelectedReservationCode = "";
        SelectedFlightCode = "";
        SelectedAirline = "";
        SelectedDay = "";
        SelectedTime = "";
        SelectedCost = "";
        SelectedName = "";
        SelectedStatus = "";
    }

    //for save reservation button
    private async void SaveReservation()
    {
        var res = foundReservations.FirstOrDefault(r => r.Reservationcode == SelectedReservationCode);
        if (res == null)
            return;

        res.Name = SelectedName;
        res.Status = SelectedStatus.Equals("Active", StringComparison.OrdinalIgnoreCase);

        await reservationManager.SaveReservation(res);
    }

    //for cancel reservation button
    private async void CancelReservation()
    {
        if (!string.IsNullOrWhiteSpace(SelectedReservationCode))
        {
            await reservationManager.DeleteReservation(SelectedReservationCode);
            FindReservations();
            ClearSelectedReservation();
            StateHasChanged();
        }
    }


}
